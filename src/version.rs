//! Get the version tag and build information, generated by the `vergen-gitcl` crate.

const BUILD_DATE: &str = env!("VERGEN_BUILD_DATE");
const CARGO_DEBUG: &str = env!("VERGEN_CARGO_DEBUG");
const CARGO_TARGET_TRIPLE: &str = env!("VERGEN_CARGO_TARGET_TRIPLE");
const GIT_DESCRIBE: &str = env!("VERGEN_GIT_DESCRIBE");
const RUSTC_SEMVER: &str = env!("VERGEN_RUSTC_SEMVER");

pub fn get_target_triple(include_abi: bool) -> String {
    // remove `unknown` because it conveys no useful information and confusing to users
    // (better have `generic` instead, but `gcc -dumpmachine` simply omits it), same for `pc`;
    // NOTE, this is comparison with gcc triples (`rustc --print host-tuple` vs `gcc -dumpmachine`
    // on github actions):
    //  - `x86_64-unknown-linux-gnu` vs `x86_64-linux-gnu`
    //  - `x86_64-pc-windows-msvc` vs `x86_64-w64-mingw32`
    //  - `aarch64-apple-darwin` vs `arm64-apple-darwin23.6.0`
    let mut triple = CARGO_TARGET_TRIPLE.split('-').collect::<Vec<_>>();
    if !include_abi {
        triple.pop();
    }
    if triple.get(1) == Some(&"unknown") || triple.get(1) == Some(&"pc") {
        triple.remove(1);
    }
    triple.join("-")
}

pub fn get_version() -> String {
    if GIT_DESCRIBE.len() == 7 && !GIT_DESCRIBE.contains(|c: char| !c.is_ascii_hexdigit()) {
        format!("{}-{}", BUILD_DATE.replace("-", ""), GIT_DESCRIBE)
    } else {
        GIT_DESCRIBE.to_owned()
    }
}

pub fn get_release_channel() -> &'static str {
    if GIT_DESCRIBE.starts_with('v') {
        "stable"
    } else {
        "dev"
    }
}

pub fn get_build_date() -> &'static str {
    BUILD_DATE
}

#[allow(clippy::uninlined_format_args)]
pub fn print_version() {
    println!("version:  {} ({})", get_version(), get_release_channel());
    println!("date:     {}", get_build_date());
    println!("arch:     {}", get_target_triple(true));
    let mode = if CARGO_DEBUG == "true" { " (debug)" } else { "" };
    println!("compiler: {}{}", RUSTC_SEMVER, mode);
}
